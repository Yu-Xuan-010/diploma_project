<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cms.reception.mapper.CourseCommentMapper">
    <resultMap id="BaseResultMap" type="com.cms.reception.entity.CourseComment">
        <id column="id" property="id"/>
        <result column="course_id" property="courseId"/>
        <result column="user_id" property="userId"/>
        <result column="content" property="content"/>
        <result column="rating" property="rating"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="user_name" property="userName"/>
        <result column="user_avatar" property="userAvatar"/>
        <collection property="replies" ofType="com.cms.reception.entity.CourseCommentReply">
            <id column="reply_id" property="id"/>
            <result column="reply_comment_id" property="commentId"/>
            <result column="reply_user_id" property="userId"/>
            <result column="reply_content" property="content"/>
            <result column="reply_create_time" property="createTime"/>
            <result column="reply_update_time" property="updateTime"/>
            <result column="reply_user_name" property="userName"/>
            <result column="reply_user_avatar" property="userAvatar"/>
        </collection>
    </resultMap>

    <select id="selectByCourseId" resultMap="BaseResultMap">
        SELECT 
            cc.*,
            u.username as user_name,
            u.avatar as user_avatar,
            cr.id as reply_id,
            cr.comment_id as reply_comment_id,
            cr.user_id as reply_user_id,
            cr.content as reply_content,
            cr.create_time as reply_create_time,
            cr.update_time as reply_update_time,
            ru.username as reply_user_name,
            ru.avatar as reply_user_avatar
        FROM course_comment cc
        LEFT JOIN user u ON cc.user_id = u.id
        LEFT JOIN course_comment_reply cr ON cc.id = cr.comment_id
        LEFT JOIN user ru ON cr.user_id = ru.id
        WHERE cc.course_id = #{courseId}
        ORDER BY cc.create_time DESC, cr.create_time ASC
    </select>

    <insert id="insert" parameterType="com.cms.reception.entity.CourseComment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO course_comment (
            course_id,
            user_id,
            content,
            rating,
            create_time,
            update_time
        ) VALUES (
            #{courseId},
            #{userId},
            #{content},
            #{rating},
            NOW(),
            NOW()
        )
    </insert>

    <delete id="deleteById">
        DELETE FROM course_comment WHERE id = #{id}
    </delete>

    <select id="selectById" resultMap="BaseResultMap">
        SELECT 
            cc.*,
            u.username as user_name,
            u.avatar as user_avatar,
            cr.id as reply_id,
            cr.comment_id as reply_comment_id,
            cr.user_id as reply_user_id,
            cr.content as reply_content,
            cr.create_time as reply_create_time,
            cr.update_time as reply_update_time,
            ru.username as reply_user_name,
            ru.avatar as reply_user_avatar
        FROM course_comment cc
        LEFT JOIN user u ON cc.user_id = u.id
        LEFT JOIN course_comment_reply cr ON cc.id = cr.comment_id
        LEFT JOIN user ru ON cr.user_id = ru.id
        WHERE cc.id = #{id}
    </select>

    <select id="existsByCourseIdAndUserId" resultType="boolean">
        SELECT EXISTS(
            SELECT 1 FROM course_comment 
            WHERE course_id = #{courseId} AND user_id = #{userId}
            AND rating IS NOT NULL
        )
    </select>
</mapper> 