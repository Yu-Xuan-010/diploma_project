<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cms.reception.mapper.CourseMapper">
    <resultMap id="BaseResultMap" type="com.cms.reception.entity.Course">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="description" property="description"/>
        <result column="image" property="image"/>
        <result column="category_id" property="categoryId"/>
        <result column="teacher_id" property="teacherId"/>
        <result column="status" property="status"/>
        <result column="view_count" property="viewCount"/>
        <result column="student_count" property="studentCount"/>
        <result column="average_rating" property="averageRating"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="category_name" property="categoryName"/>
        <result column="teacher_name" property="teacherName"/>
        <result column="reject_reason" property="rejectReason"/>
        <association property="popularity" javaType="com.cms.reception.entity.CoursePopularity">
            <id column="popularity_id" property="id"/>
            <result column="course_id" property="courseId"/>
            <result column="popularity_course_name" property="courseName"/>
            <result column="view_count" property="viewCount"/>
            <result column="student_count" property="studentCount"/>
            <result column="created_at" property="createdAt"/>
            <result column="updated_at" property="updatedAt"/>
        </association>
    </resultMap>

    <sql id="Base_Column_List">
        c.id, c.name, c.description, c.image, c.category_id, c.teacher_id, c.status, 
        COALESCE(cp.view_count, 0) as view_count, c.student_count, c.average_rating, 
        c.created_at, c.updated_at, cat.name as category_name, u.username as teacher_name
    </sql>

    <select id="selectCourseList" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM course c
        LEFT JOIN course_popularity cp ON c.id = cp.course_id
        LEFT JOIN category cat ON c.category_id = cat.id
        LEFT JOIN user u ON c.teacher_id = u.id
        <where>
            <if test="categoryId != null">
                AND c.category_id = #{categoryId}
            </if>
            <if test="status != null and status != ''">
                AND c.status = #{status}
            </if>
        </where>
        ORDER BY c.created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="countCourses" resultType="int">
        SELECT COUNT(*)
        FROM course c
        <where>
            <if test="categoryId != null">
                AND c.category_id = #{categoryId}
            </if>
            <if test="status != null and status != ''">
                AND c.status = #{status}
            </if>
        </where>
    </select>

    <select id="selectCourseById" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM course c
        LEFT JOIN course_popularity cp ON c.id = cp.course_id
        LEFT JOIN category cat ON c.category_id = cat.id
        LEFT JOIN user u ON c.teacher_id = u.id
        WHERE c.id = #{id}
    </select>

    <insert id="insertCourse" parameterType="com.cms.reception.entity.Course" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO course (
            name, description, image, category_id, teacher_id, status,
            student_count, average_rating, created_at, updated_at
        )
        VALUES (
            #{name}, #{description}, #{image}, #{categoryId}, #{teacherId}, #{status},
            #{studentCount}, #{averageRating}, #{createdAt}, #{updatedAt}
        )
    </insert>

    <update id="updateCourse" parameterType="com.cms.reception.entity.Course">
        UPDATE course
        <set>
            <if test="name != null">name = #{name},</if>
            <if test="description != null">description = #{description},</if>
            <if test="image != null">image = #{image},</if>
            <if test="categoryId != null">category_id = #{categoryId},</if>
            <if test="teacherId != null">teacher_id = #{teacherId},</if>
            <if test="status != null">status = #{status},</if>
            <if test="studentCount != null">student_count = #{studentCount},</if>
            <if test="averageRating != null">average_rating = #{averageRating},</if>
            <if test="rejectReason != null">reject_reason = #{rejectReason},</if>
            updated_at = #{updatedAt}
        </set>
        WHERE id = #{id}
    </update>

    <delete id="deleteCourseById">
        DELETE FROM course WHERE id = #{id}
    </delete>

    <select id="selectTop5ByPopularity" resultMap="BaseResultMap">
        SELECT 
            c.*,
            cat.name as category_name,
            u.username as teacher_name,
            cp.view_count,
            cp.student_count
        FROM course c
        LEFT JOIN category cat ON c.category_id = cat.id
        LEFT JOIN user u ON c.teacher_id = u.id
        LEFT JOIN course_popularity cp ON c.id = cp.course_id
        WHERE c.status = 'approved'
        ORDER BY (cp.view_count * 0.6 + cp.student_count * 0.4) DESC
        LIMIT 5
    </select>

    <update id="incrementViewCount">
        INSERT INTO course_popularity (course_id, view_count)
        VALUES (#{id}, 1)
        ON DUPLICATE KEY UPDATE view_count = view_count + 1
    </update>

    <select id="selectCoursesByTeacherId" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM course c
        LEFT JOIN course_popularity cp ON c.id = cp.course_id
        LEFT JOIN category cat ON c.category_id = cat.id
        LEFT JOIN user u ON c.teacher_id = u.id
        WHERE c.teacher_id = #{teacherId}
        ORDER BY c.created_at DESC
    </select>

    <select id="selectCoursesByCategoryId" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM course c
        LEFT JOIN course_popularity cp ON c.id = cp.course_id
        LEFT JOIN category cat ON c.category_id = cat.id
        WHERE c.category_id = #{categoryId}
        AND c.status = 'approved'
        ORDER BY c.created_at DESC
    </select>

    <select id="selectByTeacherId" resultMap="BaseResultMap">
        SELECT 
            c.*,
            cat.name as category_name,
            u.username as teacher_name,
            cp.view_count,
            cp.student_count,
            cp.course_name as popularity_course_name
        FROM course c
        LEFT JOIN category cat ON c.category_id = cat.id
        LEFT JOIN user u ON c.teacher_id = u.id
        LEFT JOIN course_popularity cp ON c.id = cp.course_id
        WHERE c.teacher_id = #{teacherId}
        ORDER BY c.created_at DESC
    </select>
</mapper> 